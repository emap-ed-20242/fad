-- Ideia : Transformar a fun√ß√£o pick que tem custo quadr√°tico em custo linear

/-
picks [] = []
picks (x:xs) = (x, xs) : [(y, x:ys) | (y, ys) <- picks xs]

* Para uma lista vazia ([]), ela retorna uma lista vazia.
* Para uma lista n√£o vazia (x:xs), ela considera o elemento x como a escolha atual, deixando o restante da lista como xs.
 Al√©m disso, recursivamente, aplica o mesmo processo ao restante da lista (xs), tratando cada elemento subsequente
  como a poss√≠vel escolha atual e reconstruindo a lista restante com o elemento inicial (x) reinserido

picks [3, 1, 4] =
  [(3, [1, 4]), (1, [3, 4]), (4, [3, 1])]

pick xs = minimum (picks xs)

* seleciona o menor elemento de uma lista junto com o restante da lista sem esse elemento

pick [3, 1, 4]
= minimum [(3, [1, 4]), (1, [3, 4]), (4, [3, 1])]
= (1, [3, 4])

O custo quadr√°tico surge porque, a cada itera√ß√£o, a fun√ß√£o cria uma nova sublista removendo um elemento da lista original.
 Como a cria√ß√£o de cada sublista envolve copiar elementos, o custo de recriar as sublistas aumenta linearmente a cada itera√ß√£o, resultando em um custo total de O(n¬≤)

-/


/-
Nova fun√ß√£o com complexidade linear

Caso base:
Quando a lista cont√©m apenas um elemento [x], a fun√ß√£o simplesmente retorna um par com este elemento como o menor (x) e uma lista vazia [] (o resto da lista).

Caso recursivo:
Quando a lista cont√©m mais de um elemento (x : xs), a fun√ß√£o realiza os seguintes passos:
Faz uma chamada recursiva para calcular o menor elemento y e a sublista restante ys da lista xs.
Compara x com y:
Se x √© menor ou igual a y, ent√£o o menor elemento √© x e a sublista restante √© xs (a lista original menos o x).
Caso contr√°rio, o menor elemento √© y e x √© adicionado de volta no in√≠cio de ys para formar a sublista restante.

-/

def pick : List Nat ‚Üí Option (Nat √ó List Nat)
| []       => none
| [x]      => some (x, [])
| (x :: xs) =>
  match pick xs with
  | some (y, ys) =>
    if x ‚â§ y then some (x, xs)
    else some (y, x :: ys)
  | none => none

-- Testes
#eval pick [7]         -- Esperado: `some (7, [])`
#eval pick [3, 1, 4]   -- Esperado: `some (1, [3, 4])`
#eval pick [10, 20, 2, 5, 7] -- Esperado: `some (2, [10, 20, 5, 7])`


-- Mesma fun√ß√£o com mensagens de depura√ß√£o (mais polu√≠da)
def pick2 : List Nat ‚Üí Option (Nat √ó List Nat)
| []       =>
  dbg_trace "Lista vazia, retornando none"; none
| [x]      =>
  dbg_trace s!"Lista com um √∫nico elemento: {x}, retornando some ({x}, [])"; some (x, [])
| (x :: xs) =>
  dbg_trace s!"Processando: cabe√ßa = {x}, cauda = {xs}";
  match pick2 xs with
  | some (y, ys) =>
    if x ‚â§ y then
      dbg_trace s!"Escolhido: {x}, resto: {xs}"; some (x, xs)
    else
      dbg_trace s!"Escolhido: {y}, inserindo {x} de volta no resto {ys}"; some (y, x :: ys)
  | none =>
    dbg_trace "Nenhuma escolha poss√≠vel para lista vazia!"; none


#eval pick2 [10, 20, 2, 5, 7] -- Esperado: `some (2, [10, 20, 5, 7])`

/-

A nova defini√ß√£o de pick tem complexidade O(n) porque:

* A fun√ß√£o percorre a lista apenas uma vez.

  Para cada elemento ùë• da lista, ela faz uma √∫nica compara√ß√£o com o menor elemento calculado at√© o momento (y).

* N√£o h√° recria√ß√£o repetitiva de sublistas.

  A sublista restante √© constru√≠da incrementalmente ao longo da recurs√£o, o que evita opera√ß√µes custosas como a reconstru√ß√£o de listas em cada itera√ß√£o (como na vers√£o anterior com picks).

* A recurs√£o desce at√© o √∫ltimo elemento da lista (O(n)) e depois retorna, realizando uma √∫nica compara√ß√£o por elemento

Portanto, a complexidade total √© O(n)
-/
